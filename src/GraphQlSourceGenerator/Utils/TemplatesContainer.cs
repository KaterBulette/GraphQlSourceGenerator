namespace GraphQlSourceGenerator.Utils
{
    internal static class TemplatesContainer
    {
        public const string AutogeneratedCommentTemplate = @"/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
           Autogenerated by {0}
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/";

        public const string ListTemplate = @"List<{0}>";

        public const string EmptyTemplate = "{0}";

        public const string GqlFragmentTemplate = @"
fragment {0}Fields on {0} {{
{1}
}}";

        public const string GqlFragmentReferenceTemplate = @"...{0}Fields";

        public const string GqlRequestReferenceTemplate = @"{{...{0}Fields}}";

        public const string GqlSubscriptionArgTemplate = @"...on {0} {1}";

        public const string GqlQueryTemplate = @"
query {0}({1}) {{
    {0}({2}) {3}
}}";

        public const string GqlMutationTemplate = @"
mutation {0}({1}) {{
    {0}({2}) {3}
}}";

        public const string GqlSubscriptionTemplate = @"
subscription {0} {{
    event: {0} {{
        {1}
    }}
}}";

        public const string NamespaceTemplate = @"
namespace {0}
{{
{1}
}}";

        public const string ClassTemplate = @"
    {0}{1} {2} {3}{4}
    {{
{5}
    }}";

        public const string UsingTemplate = @"using {0};";

        public const string JsonPropertyTemplate = @"[JsonProperty(""{0}"")]";

        public const string PublicReadonlyPropertyTemplate = @"public {0} {1} {{ get; }}";

        public const string InheritanceTemplate = " : {0}";

        public const string CtorTemplate = @"
        [JsonConstructor]
        public {0}({1})
        {{
{2}
        }}";

        public const string CtorJsonParameterTemplate = @"[JsonProperty(""{0}"")] {1} {2},";

        public const string CtorParameterSetTemplate = @"{0} = {1};";

        public const string RequestMethodSignatureTemplate = @"
        #region {1}

        public static async Task<{0}> {1}Async(this IGraphQlClient graphQlClient{2})
        {{
{3}
        }}

        private const string {1}Document = @""{4}"";

        #endregion {1}";

        public const string RequestPreparationTemplate = @"
            var variables = new {{ {0} }};
            var request = new GraphQLRequest
            {{
                Query = {1}Document + Fragments.GqlFragmentsDocument,
                OperationName = ""{2}"",
                Variables = variables
            }};

{3}";

        public const string QueryGetResponseTemplate = @"
            var response = await graphQlClient.QueryAsync<{0}>(request).ConfigureAwait(false);
            return response;";

        public const string MutationGetResponseTemplate = @"
            var response = await graphQlClient.MutateAsync<{0}>(request).ConfigureAwait(false);
            return response;";

        public const string SubscriptionMethodSignatureTemplate = @"
        #region {1}

        public static void {1}(this IGraphQlClient graphQlClient,
                               Action<GraphQLResponse<{0}>> onNextCallBack,
                               Action<Exception> onErrorSubscriptionCallBack,
                               Action onCompletedSubscriptionCallBack,
                               CancellationToken unsubscriber)
        {{
            var request = new GraphQLRequest
            {{
                Query = {1}Document + Fragments.GqlFragmentsDocument,
                OperationName = ""{2}""
            }};

            graphQlClient.Subscribe(request, onNextCallBack, onErrorSubscriptionCallBack, onCompletedSubscriptionCallBack, unsubscriber);
        }}

        private const string {1}Document = @""{3}"";

        #endregion {1}";

        public const string PublicDocumentSignatureTemplate = @"        public const string {0} = @""{1}"";";

        public const string ResponseNameTemplate = @"{0}Response";
    }
}
