using GraphQlSourceGenerator.Enums;
using GraphQlSourceGenerator.Models;
using GraphQlSourceGenerator.Models.Interfaces;
using GraphQlSourceGenerator.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GraphQlSourceGenerator.Services
{
    internal class Generator
    {
        private readonly GraphQlGeneratorSettings _graphQlGeneratorSettings;
        private readonly string _usings;

        private readonly ICollection<string> _scalarTypeNames =
            new HashSet<string>
            {
                "Boolean",
                "Float",
                "ID",
                "Int",
                "String"
            };

        private readonly string _autogeneratedComment;

        private readonly IList<IGraphQlObjectInfo> _classInfos;
        private readonly IList<IGraphQlObjectInfo> _inputObjectsInfos;
        private readonly IList<GraphQlEnumInfo> _enumsInfos;
        private readonly IList<GraphQlInterfaceInfo> _interfaceInfos;
        private readonly IList<GraphQlRequestInfo> _queryInfos;
        private readonly IList<GraphQlRequestInfo> _mutationInfos;
        private readonly IList<GraphQlSubscriptionInfo> _subscriptionInfos;

        public Generator(GraphQlSchema schema, GraphQlGeneratorSettings graphQlGeneratorSettings, string generatorName)
        {
            _ = schema ?? throw new ArgumentNullException(nameof(schema));
            _graphQlGeneratorSettings = graphQlGeneratorSettings ?? throw new ArgumentNullException(nameof(graphQlGeneratorSettings));

            var apiTypes = schema.Types
                                 .Where(t => !t.Name.StartsWith("_")
                                          && !_scalarTypeNames.Contains(t.Name))
                                 .ToList();

            var queries = schema.Types
                                .Where(t => t.Name.Equals(schema.QueryType.Name))
                                .ToList();
            _queryInfos = queries.FirstOrDefault()
                                ?.Fields
                                 .Select(qf => new GraphQlRequestInfo(qf, TemplatesContainer.GqlQueryTemplate))
                                 .ToList();

            var mutations = schema.Types
                                  .Where(t => t.Name.Equals(schema.MutationType.Name))
                                  .ToList();
            _mutationInfos = mutations.FirstOrDefault()
                                    ?.Fields
                                    .Select(mf => new GraphQlRequestInfo(mf, TemplatesContainer.GqlMutationTemplate))
                                    .ToList();

            var subscriptions = schema.Types
                                      .Where(t => t.Name.Equals(schema.SubscriptionType.Name))
                                      .ToList();

            _enumsInfos = apiTypes.Where(t => t.Kind is GraphQlTypeKind.Enum)
                                 .Select(et => new GraphQlEnumInfo(et))
                                 .ToList();

            _interfaceInfos = apiTypes.Where(t => t.Kind is GraphQlTypeKind.Interface)
                                     .Select(it => new GraphQlInterfaceInfo(it))
                                     .ToList();

            _inputObjectsInfos = apiTypes.Where(t => t.Kind is GraphQlTypeKind.InputObject)
                                         .Select(io => new GraphQlInputObjectInfo(io))
                                         .Cast<IGraphQlObjectInfo>()
                                         .ToList();

            _classInfos = apiTypes.Where(t => t.Kind is not (GraphQlTypeKind.Interface
                                                        or GraphQlTypeKind.InputObject
                                                        or GraphQlTypeKind.Enum))
                                  .Except(queries)
                                  .Except(mutations)
                                  .Except(subscriptions)
                                  .Select(ct => new GraphQlClassInfo(ct))
                                  .Cast<IGraphQlObjectInfo>()
                                  .ToList();

            _subscriptionInfos = subscriptions.FirstOrDefault()
                                             ?.Fields
                                              .Select(sf => new GraphQlSubscriptionInfo(sf, _interfaceInfos))
                                              .ToList();

            var usingsSb = new StringBuilder();
            foreach (var @using in _graphQlGeneratorSettings.Usings)
            {
                usingsSb.AppendLine(string.Format(TemplatesContainer.UsingTemplate, @using));
            }

            _usings = usingsSb.ToString();
            _autogeneratedComment = string.Format(TemplatesContainer.AutogeneratedCommentTemplate, generatorName);
        }

        public IList<(string FileName, string FileContent)> Generate()
        {
            var result = new List<(string FileName, string FileContent)>().Concat(GenerateEnums(_enumsInfos))
                                                                          .Concat(GenerateInterfaces(_interfaceInfos))
                                                                          .Concat(GenerateClasses(_inputObjectsInfos))
                                                                          .Concat(GenerateClasses(_classInfos))
                                                                          .Concat(GenerateClasses(_queryInfos.Select(qi => qi.ResponseType).ToList()))
                                                                          .Concat(GenerateClasses(_mutationInfos.Select(qi => qi.ResponseType).ToList()))
                                                                          .Concat(GenerateClasses(_subscriptionInfos.Select(qi => qi.ResponseType).ToList()))
                                                                          .ToList();
            result.Add(GenerateQueries(_queryInfos));
            result.Add(GenerateMutations(_mutationInfos));
            result.Add(GenerateSubscriptions(_subscriptionInfos));
            result.Add(GenerateFragments(_classInfos));

            return result;
        }

        private IList<(string FileName, string FileContent)> GenerateClasses(IList<IGraphQlObjectInfo> classInfos)
        {
            var result = new List<(string FileName, string FileContent)>();

            foreach (var graphQlClassInfo in classInfos)
            {
                var fileSb = new StringBuilder();
                fileSb.AppendLine(_autogeneratedComment);
                fileSb.AppendLine(_usings);

                var properties = GetPropertiesContent(graphQlClassInfo.Fields);

                var ctorParametersSb = new StringBuilder();
                var ctorParametersSetSb = new StringBuilder();
                if (graphQlClassInfo.Fields?.Any() == true)
                {
                    foreach (var (_, fieldTypeName, fieldGqlName, fieldName) in graphQlClassInfo.Fields)
                    {
                        ctorParametersSb.AppendLine("\t\t" + string.Format(TemplatesContainer.CtorJsonParameterTemplate, fieldGqlName, fieldTypeName, fieldGqlName));
                        ctorParametersSetSb.AppendLine("\t\t\t" + string.Format(TemplatesContainer.CtorParameterSetTemplate, fieldName, fieldGqlName));
                    }
                }

                var ctorParameters = ctorParametersSb.ToString().Trim().TrimEnd(',');
                var ctorParametersSet = ctorParametersSetSb.ToString().Trim('\r').Trim('\n');
                var ctor = string.Format(TemplatesContainer.CtorTemplate, graphQlClassInfo.Name, ctorParameters, ctorParametersSet);

                var contentSb = new StringBuilder();
                contentSb.AppendLine(properties);
                contentSb.AppendLine(ctor);
                var content = contentSb.ToString().Trim('\r').Trim('\n');

                var fileContent = CreateEntityFileContent("internal",
                                                          " partial",
                                                          "class",
                                                          graphQlClassInfo.Name,
                                                          graphQlClassInfo.ParentNames,
                                                          content);
                fileSb.AppendLine(fileContent);

                result.Add(($"{graphQlClassInfo.Name}.g.cs", fileSb.ToString()));
            }

            return result;
        }

        private IList<(string FileName, string FileContent)> GenerateInterfaces(IList<GraphQlInterfaceInfo> interfaceInfos)
        {
            var result = new List<(string FileName, string FileContent)>();

            foreach (var graphQlInterfaceInfo in interfaceInfos)
            {
                var fileSb = new StringBuilder();
                fileSb.AppendLine(_autogeneratedComment);
                fileSb.AppendLine(_usings);

                var properties = GetPropertiesContent(graphQlInterfaceInfo.Fields);
                var fileContent = CreateEntityFileContent("internal",
                                                          " partial",
                                                          "interface",
                                                          graphQlInterfaceInfo.Name,
                                                          graphQlInterfaceInfo.ParentNames,
                                                          properties);
                fileSb.AppendLine(fileContent);

                result.Add(($"{graphQlInterfaceInfo.Name}.g.cs", fileSb.ToString()));
            }

            return result;
        }

        private IList<(string FileName, string FileContent)> GenerateEnums(IList<GraphQlEnumInfo> enumsInfos)
        {
            var result = new List<(string FileName, string FileContent)>();

            foreach (var graphQlEnumInfo in enumsInfos)
            {
                var fileSb = new StringBuilder();
                fileSb.AppendLine(_autogeneratedComment);

                var valuesSb = new StringBuilder();
                foreach (var value in graphQlEnumInfo.Values)
                {
                    valuesSb.AppendLine("\t\t" + $"{value},");
                }

                var fileContent = CreateEntityFileContent("internal",
                                                          string.Empty,
                                                          "enum",
                                                          graphQlEnumInfo.Name,
                                                          null,
                                                          valuesSb.ToString().TrimLineEndings());
                fileSb.AppendLine(fileContent);

                result.Add(($"{graphQlEnumInfo.Name}.g.cs", fileSb.ToString()));
            }

            return result;
        }

        private (string FileName, string FileContent) GenerateQueries(IList<GraphQlRequestInfo> queryInfos)
        {
            return GenerateRequests(queryInfos, "Queries", TemplatesContainer.QueryGetResponseTemplate);
        }

        private (string FileName, string FileContent) GenerateMutations(IList<GraphQlRequestInfo> mutationInfos)
        {
            return GenerateRequests(mutationInfos, "Mutations", TemplatesContainer.MutationGetResponseTemplate);
        }

        private (string FileName, string FileContent) GenerateSubscriptions(IList<GraphQlSubscriptionInfo> subscriptionInfos)
        {
            const string fileName = "Subscriptions";
            var fileSb = new StringBuilder();
            fileSb.AppendLine(_autogeneratedComment);
            fileSb.AppendLine(_usings);

            var fileContentSb = new StringBuilder();
            foreach (var subscriptionQlQueryInfo in subscriptionInfos)
            {
                var queryMethodSignature = string.Format(TemplatesContainer.SubscriptionMethodSignatureTemplate,
                                                         subscriptionQlQueryInfo.ResponseType.Name,
                                                         subscriptionQlQueryInfo.Name,
                                                         subscriptionQlQueryInfo.AliasName,
                                                         subscriptionQlQueryInfo.Document)
                                                 .TrimLineEndings();
                fileContentSb.AppendLine(queryMethodSignature);
                fileContentSb.AppendLine();
            }

            var content = fileContentSb.ToString().TrimLineEndings();
            var fileContent = CreateEntityFileContent("internal",
                                                      " static partial",
                                                      "class",
                                                      fileName,
                                                      null,
                                                      content);
            fileSb.AppendLine(fileContent.TrimLineEndings());

            return ($"{fileName}.g.cs", fileSb.ToString());
        }

        private (string FileName, string FileContent) GenerateFragments(IList<IGraphQlObjectInfo> classInfos)
        {
            const string fileName = "Fragments";
            var fileSb = new StringBuilder();
            fileSb.AppendLine(_autogeneratedComment);
            fileSb.AppendLine(_usings);

            var documentsAgregatorSb = new StringBuilder();
            foreach (var graphQlClassInfo in classInfos)
            {
                documentsAgregatorSb.AppendLine(graphQlClassInfo.Document);
                documentsAgregatorSb.AppendLine();
            }

            var content = string.Format(TemplatesContainer.PublicDocumentSignatureTemplate, "GqlFragmentsDocument", documentsAgregatorSb.ToString().TrimLineEndings());
            var fileContent = CreateEntityFileContent("internal",
                                                      " static partial",
                                                      "class",
                                                      fileName,
                                                      null,
                                                      content);
            fileSb.AppendLine(fileContent.TrimLineEndings());

            return ($"{fileName}.g.cs", fileSb.ToString());
        }

        private (string FileName, string FileContent) GenerateRequests(IList<GraphQlRequestInfo> requestInfos,
                                                                       string fileName,
                                                                       string requestGetResponseTemplate)
        {
            var fileSb = new StringBuilder();
            fileSb.AppendLine(_autogeneratedComment);
            fileSb.AppendLine(_usings);

            var fileContentSb = new StringBuilder();
            foreach (var requestQlQueryInfo in requestInfos)
            {
                var queryGetResponse = string.Format(requestGetResponseTemplate, requestQlQueryInfo.ResponseType.Name).TrimLineEndings();

                var variables = string.Join(", ", requestQlQueryInfo.Args.Select(a => a.ArgName)).Trim().TrimEnd(',');
                var methodParams = string.Join(", ", requestQlQueryInfo.Args.Select(a => $"{a.ArgTypeName} {a.ArgName}")).Trim().TrimEnd(',') is { } parameters && !string.IsNullOrEmpty(parameters)
                                   ? $", {parameters}"
                                   : string.Empty;

                var queryPreparation = string.Format(TemplatesContainer.RequestPreparationTemplate, variables, requestQlQueryInfo.Name, requestQlQueryInfo.AliasName, queryGetResponse)
                                             .TrimLineEndings();

                var queryMethodSignature = string.Format(TemplatesContainer.RequestMethodSignatureTemplate,
                                                         requestQlQueryInfo.ResponseType.Name,
                                                         requestQlQueryInfo.Name,
                                                         methodParams,
                                                         queryPreparation,
                                                         requestQlQueryInfo.Document)
                                                .TrimLineEndings();
                fileContentSb.AppendLine(queryMethodSignature);
                fileContentSb.AppendLine();
            }

            var content = fileContentSb.ToString().TrimLineEndings();
            var fileContent = CreateEntityFileContent("internal",
                                                      " static partial",
                                                      "class",
                                                      fileName,
                                                      null,
                                                      content);
            fileSb.AppendLine(fileContent.TrimLineEndings());

            return ($"{fileName}.g.cs", fileSb.ToString());
        }

        private string CreateEntityFileContent(string accessibility,
                                               string modifier,
                                               string entityType,
                                               string entityName,
                                               IList<string> inheritance,
                                               string entityContent)
        {
            var inheritanceContent = inheritance?.Any() == true
                ? string.Join(", ", inheritance).TrimEnd().TrimEnd(',')
                : string.Empty;

            return string.Format(TemplatesContainer.NamespaceTemplate,
                                 _graphQlGeneratorSettings.Namespace,
                                 string.Format(TemplatesContainer.ClassTemplate,
                                               accessibility,
                                               modifier,
                                               entityType,
                                               entityName,
                                               string.IsNullOrEmpty(inheritanceContent) ? string.Empty : string.Format(TemplatesContainer.InheritanceTemplate, inheritanceContent),
                                               entityContent).TrimLineEndings());
        }

        private string GetPropertiesContent(IList<(GraphQlTypeKind FieldKind, string FieldTypeName, string FieldGqlName, string FieldName)> fields)
        {
            if (fields?.Any() != true)
            {
                return string.Empty;
            }

            var propertiesSb = new StringBuilder();
            foreach (var (_, fieldTypeName, fieldGqlName, fieldName) in fields)
            {
                propertiesSb.AppendLine("\t\t" + string.Format(TemplatesContainer.JsonPropertyTemplate, fieldGqlName));
                propertiesSb.AppendLine("\t\t" + string.Format(TemplatesContainer.PublicReadonlyPropertyTemplate, fieldTypeName, fieldName));
                propertiesSb.AppendLine();
            }

            return propertiesSb.ToString().TrimLineEndings();
        }
    }
}
